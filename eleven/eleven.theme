<?php
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eleven_theme_suggestions_container_alter(array &$suggestions, array $variables) {

  if (!empty($variables['element'])) {
    $element = $variables['element'];
  }

  // Provide suggestions to create context, if none already exist.
  if (empty($suggestions)) {
    // If there are no suggestions the implementation is likely via
    // #theme_wrappers, which doesn't provide any context. In that case, use the
    // element being wrapped to derive better context.
    if (!empty($element['#theme_wrappers'])) {
      if (in_array('container', $element['#theme_wrappers'])) {
        // If #type and #theme_wrappers are both 'container', avoid making the
        // context situation worse.
        if (isset($element['#type'])) {
          if ($element['#type'] == 'container') {
            // The children elements likely use #theme, which tells us what is
            // being rendered. This will capture things like the views more link:
            // container__more_link.
            foreach (Element::children($element) as $key) {
              if (isset($element[$key]['#theme'])) {
                  $suggestions[] = 'container__' . $element[$key]['#theme'];
                }
              }
            }
            else {
              // As long as #type is not also 'container', it's just as good an
              // indication of context as #theme. This will capture a Views
              // element container, e.g. container__view
              $suggestions[] = 'container__' . $element['#type'];
            }
          }
        }

        // If there is a #name property, this can be useful too. For example,
        // Views module uses this hook, and this would generate a suggestion
        // like: container__view__machinename.
        if (!empty($element['#name']) && !empty($element['#type'])) {
          $suggestions[] = 'container__' . $element['#type'] . '__' . $element['#name'];
        }
      }
    }

    // Re-route some templates based on those smarter suggestions.
    if (in_array('container__view', $suggestions)) {
      $suggestions[] = 'container__nope';
    }
}

// ----------------------------------------------------------------------------
// node-edit 2 columns
// ----------------------------------------------------------------------------
use Drupal\Core\Form\FormStateInterface;

function eleven_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = array('node_edit_form');

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = array(
    '#attributes' => array('class' => array('entity-meta__header')),
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => array(
      '#type' => 'html_tag',
      '#tag' => 'h4',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => array(
        'class' => 'entity-meta__title',
      ),
    ),
    'changed' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('entity-meta__last-saved')),
      '#markup' => '<b>' . t('Last saved') . '</b> ' . $is_new,
    ),
    'author' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('entity-meta__author')),
      '#markup' => '<b>' . t('Author') . '</b> ' . $node->getOwner()->getUsername(),
    ),
  );
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}
